// Generated by view binder compiler. Do not edit!
package com.example.bebagua.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.constraintlayout.motion.widget.MotionLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.bebagua.R;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentGoalsBinding implements ViewBinding {
  @NonNull
  private final MotionLayout rootView;

  @NonNull
  public final ImageView bottomGeometry;

  @NonNull
  public final AppCompatButton btnGoBack;

  @NonNull
  public final ImageView btnSettings;

  @NonNull
  public final MotionLayout constraintLayoutGoalsScreen;

  @NonNull
  public final ImageView firstTopGeometry;

  @NonNull
  public final CircleImageView ivUserImageProfile;

  @NonNull
  public final RecyclerView rvGoals;

  private FragmentGoalsBinding(@NonNull MotionLayout rootView, @NonNull ImageView bottomGeometry,
      @NonNull AppCompatButton btnGoBack, @NonNull ImageView btnSettings,
      @NonNull MotionLayout constraintLayoutGoalsScreen, @NonNull ImageView firstTopGeometry,
      @NonNull CircleImageView ivUserImageProfile, @NonNull RecyclerView rvGoals) {
    this.rootView = rootView;
    this.bottomGeometry = bottomGeometry;
    this.btnGoBack = btnGoBack;
    this.btnSettings = btnSettings;
    this.constraintLayoutGoalsScreen = constraintLayoutGoalsScreen;
    this.firstTopGeometry = firstTopGeometry;
    this.ivUserImageProfile = ivUserImageProfile;
    this.rvGoals = rvGoals;
  }

  @Override
  @NonNull
  public MotionLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentGoalsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentGoalsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_goals, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentGoalsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottomGeometry;
      ImageView bottomGeometry = ViewBindings.findChildViewById(rootView, id);
      if (bottomGeometry == null) {
        break missingId;
      }

      id = R.id.btnGoBack;
      AppCompatButton btnGoBack = ViewBindings.findChildViewById(rootView, id);
      if (btnGoBack == null) {
        break missingId;
      }

      id = R.id.btnSettings;
      ImageView btnSettings = ViewBindings.findChildViewById(rootView, id);
      if (btnSettings == null) {
        break missingId;
      }

      MotionLayout constraintLayoutGoalsScreen = (MotionLayout) rootView;

      id = R.id.firstTopGeometry;
      ImageView firstTopGeometry = ViewBindings.findChildViewById(rootView, id);
      if (firstTopGeometry == null) {
        break missingId;
      }

      id = R.id.ivUserImageProfile;
      CircleImageView ivUserImageProfile = ViewBindings.findChildViewById(rootView, id);
      if (ivUserImageProfile == null) {
        break missingId;
      }

      id = R.id.rvGoals;
      RecyclerView rvGoals = ViewBindings.findChildViewById(rootView, id);
      if (rvGoals == null) {
        break missingId;
      }

      return new FragmentGoalsBinding((MotionLayout) rootView, bottomGeometry, btnGoBack,
          btnSettings, constraintLayoutGoalsScreen, firstTopGeometry, ivUserImageProfile, rvGoals);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
